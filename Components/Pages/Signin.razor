@page "/signin"
@using MudBlazor
@using WRModel.Models
@using WSService.Services
@using static BCrypt.Net.BCrypt
@using Blazored.SessionStorage
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer
@inject MongoUserService UserService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ISessionStorageService SessionStorage

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="mt-10 container">
    <MudPaper Class="pa-6" Elevation="6">
        <MudText Typo="Typo.h5" Class="mb-4 text-center" Style="font-size: 30px;">
        <span style="color:blue">Create an</span>
        <span style="color:violet">Account</span>
        </MudText>

            <MudForm Model="@signupModel" @ref="form">

                <MudTextField @bind-Value="signupModel.FullName" Label="Full Name" Variant="Variant.Filled"
                              For="@(() => signupModel.FullName)" Required="true"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Person"
                              Class="mb-3" />

                <MudTextField @bind-Value="signupModel.Email" Label="Email" Variant="Variant.Filled"
                              For="@(() => signupModel.Email)" Required="true"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Email"
                              Class="mb-3" />

                <MudTextField @bind-Value="signupModel.Password" Label="Password" Variant="Variant.Filled"
                              InputType="InputType.Password"
                              For="@(() => signupModel.Password)" Required="true"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Lock"
                              Class="mb-4" />

                <MudTextField @bind-Value="signupModel.ConfirmPassword" Label="Confirm Password" Variant="Variant.Filled"
                              InputType="InputType.Password"
                              For="@(() => signupModel.ConfirmPassword)" Required="true"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Lock"
                              Class="mb-4" />

                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SigninUser" class="mt-3 w-100 buttin" Style="font-weight: bolder; font-size: 25px; color: white;">
                    Sign in
                </MudButton>
            </MudForm>

        <MudText Class="mt-4 text-center">
            Already have an account?
            <MudLink Href="/login">Login here</MudLink>
        </MudText>
    </MudPaper>
</MudContainer>

@code {
    private MudForm? form;
    private SignupModel signupModel = new();
    private string errorMessage = "";
    private bool showError = false;

    
    private async Task SigninUser()
    {
        if (form != null)
        {
            await form.Validate();
            if (!form.IsValid)
                return;
        }

        // Check if user already exists (optional but good practice)
        var existingUser = await UserService.GetUserAsync(signupModel.Email);
        if (existingUser != null)
        {
            Snackbar.Add("User already exists with this email.", Severity.Warning);
            return;
        }

        // Create new user object
        var newUser = new UserModel
        {
            FullName = signupModel.FullName,
            Email = signupModel.Email,
            Password = BCrypt.Net.BCrypt.HashPassword(signupModel.Password) // Always hash!
        };

        // Save to DB
        await UserService.AddUserAsync(newUser);

        // Store in session
        await SessionStorage.SetItemAsync("currentUser", JsonSerializer.Serialize(newUser));

        Snackbar.Add("Signup successful!", Severity.Success);

       
        Navigation.NavigateTo("/");
    }

        
    public class SignupModel
    {
        [Required(ErrorMessage = "Full name is required")]
        public string FullName { get; set; } = "";

        [Required(ErrorMessage = "Email is Required") ]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Confirm Password is required")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = "";
    }
}