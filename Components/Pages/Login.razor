@page "/login"
@using MudBlazor
@using System.Text.Json
@using WSService.Services
@using static BCrypt.Net.BCrypt
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer
@inject MongoUserService UserService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@* @inject AuthService AuthService *@
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage



<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="mt-10">
    <MudPaper Class="pa-6" Elevation="6">
        <MudText Typo="Typo.h5" Class="mb-4 text-center">Login to Your Account</MudText>

        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
            <MudForm @ref="form">
                <MudTextField @bind-Value="loginModel.Email" Label="Email" Variant="Variant.Filled"
                              For="@(() => loginModel.Email)" Required="true"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Email"
                              Class="mb-3" />

                <MudTextField @bind-Value="loginModel.Password" Label="Password" Variant="Variant.Filled"
                              InputType="InputType.Password"
                              For="@(() => loginModel.Password)" Required="true"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Lock"
                              Class="mb-4" />

                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoginUser" Class="mt-3 w-100">
                    Login
                </MudButton>
            </MudForm>
        </EditForm>

        <MudText Class="mt-4 text-center">
            Don't have an account?
            <MudLink Href="/signin">Sign up now</MudLink>
        </MudText>
    </MudPaper>
</MudContainer>

@code {
    private MudForm? form;
    private LoginModel loginModel = new();
    private string email = string.Empty;
    private string password = string.Empty;
    

    private void HandleLogin()
    {
        Console.WriteLine($"üîê Login Attempt: {loginModel.Email}");
       
    }

     private async Task LoginUser()
    {
        var user = await UserService.LoginAsync(loginModel.Email, loginModel.Password);
        if (user != null && Verify(loginModel.Password, user.Password))
        {
            await SessionStorage.SetItemAsync("currentUser", JsonSerializer.Serialize(user));
            Console.WriteLine($"‚úÖ Login success for: {user.Email}");
            Navigation.NavigateTo("/");
        }
        else
        {
            Console.WriteLine("‚ùå Invalid credentials.");
            Snackbar.Add("Invalid email or password", Severity.Error);
        }
    }

    public class LoginModel
    {
        [Required, EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        public string Password { get; set; } = "";
    }
}
