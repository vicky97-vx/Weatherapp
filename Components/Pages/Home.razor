@page "/"
@using WRModel.Models
@using WSService.Services
@using MudBlazor
@using System.Text.Json
@rendermode InteractiveServer
@inject WeatherService WSService
@inject IJSRuntime JS

@inject SearchHistoryService SearchService
@inject MongoUserService UserService
@inject IDialogService DialogService
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.False" Class="pa-4">

    <MudGrid GutterSize="1" AlignItems="AlignItems.FlexStart" Style="margin-left: -50px;">

        <MudItem xs="6" md="5">
    <MudPaper Class="pa-4 mb-4 gradient-card" 
              Style="border-radius: 16px; height: 428px; width: 380px; margin-left: -80px; margin-top: -79px; margin-bottom: 1rem; color: white;">
        
        <!-- Search Bar -->
        <div class="search-container">
            <MudTextField @bind-Value="city" Placeholder="Enter city..." Class="search-input"  Style="color: white; "/>

            <MudIconButton Icon="@Icons.Material.Filled.Search"
                   Color="Color.Primary"
                   OnClick="HandleSearchAsync"
                   Class="search-btn" />
        </div>


        @if (WeatherData != null)
        {
            <MudGrid Class="pa-4 d-flex direction-column">
                <!-- Weather Icon -->
                <MudItem xs="4">
                    <MudIcon Icon="@GetWeatherIcon(WeatherData.Weather[0].Main)" Size="Size.Large" Style="justify-content: align-start;"/>
                    <MudText Typo="Typo.h3" Class="font-weight-bold" Style="margin-top: 5px;" >@WeatherData?.Main.Temp.ToString("0")°C</MudText>
                    <MudText Typo="Typo.subtitle1" Style="margin-top: 5px;">@WeatherData?.Weather[0].Description</MudText>
                </MudItem>

                <MudIconButton Color="Color.Warning"
                    Icon="@(_isFavorite ? Icons.Material.Filled.Favorite : Icons.Material.Outlined.FavoriteBorder)"
                    OnClick="ToggleFavoriteCity"
                    Size="Size.Large"
                    Class="ml-20" />

            </MudGrid>

            <MudDivider Class="my-3" />

           <MudGrid Class="pa-3"Style="display:flex; flex-direction: row;">
                <!-- Location -->
                <MudItem xs="6" >
                    <MudIcon Icon="@Icons.Material.Filled.LocationOn"/>
                        <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                        @WeatherData?.Name, @WeatherData?.Sys.Country
                        </MudText>
                </MudItem>

                <!-- Date & Time -->
                <MudItem xs="6">
                    <MudIcon Icon="@Icons.Material.Filled.CalendarToday" />
                        <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                            @DateTime.Now.ToString("dd MMM, yyyy hh:mm tt")
                        </MudText>
                    </MudItem>
            </MudGrid>

            @if (showAlert)
                            {
                                <MudAlert Severity="@alertSeverity" Dense="true" Elevation="2" Variant="Variant.Outlined"  Class="mt-2" Closeable="true" OnClose="@(() => showAlert = false)">
                                    @alertMessage
                                </MudAlert>
                            }
        }
    </MudPaper>


<MudText Typo="Typo.h6" Style="margin-left: -70px;">5 Day Forecast</MudText>
@if (forecastData != null)
{
    <MudPaper Class="pa-4 mb-3 gradient-card-blue" 
              Style="border-radius: 16px; margin-top: 8px; width: 380px; margin-left: -80px;">

        <!-- Scrollable Forecast List -->
        <div style="max-height: 180px; overflow-y: auto; padding-right: 6px;">
            <MudGrid>
                @foreach (var item in forecastData.list.Where((x, i) => i % 8 == 0).Take(5))
                {
                    var date = DateTimeOffset.FromUnixTimeSeconds(item.Dt).ToLocalTime();
                    var maxTemp = item.Main.TempMax.ToString("0");
                    var minTemp = item.Main.TempMin.ToString("0");

                    <MudItem xs="12">
                        <MudGrid AlignItems="Center" Class="mb-2">
                            <!-- Weather Icon -->
                            <MudItem xs="2">
                                <MudIcon Icon="@GetWeatherIcon(item.Weather[0].Main)" Size="Size.Large" />
                            </MudItem>

                            <!-- Temps -->
                            <MudItem xs="3">
                                <MudText Typo="Typo.subtitle1">+@maxTemp°/<span style="color: gray;">+@minTemp°</span></MudText>
                            </MudItem>

                            <!-- Date -->
                            <MudItem xs="3">
                                <MudText Typo="Typo.body2">@date.ToString("dd MMM")</MudText>
                            </MudItem>

                            <!-- Weekday -->
                            <MudItem xs="4">
                                <MudText Typo="Typo.body2">@date.ToString("dddd")</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                }
            </MudGrid>
        </div>

        <MudDivider Class="mt-2 mb-2" />

        <!-- Tomorrow's Weather Card (fixed at bottom) -->
        @{
            var tomorrow = forecastData.list.Where((x, i) => i % 8 == 1).FirstOrDefault();
            if (tomorrow != null)
            {
                <MudCard Class="pa-3 mt-2" Style="border-radius: 16px; box-shadow: none;">
                    <MudGrid AlignItems="Center">
                        <MudItem xs="3">
                            <MudIcon Icon="@GetWeatherIcon(tomorrow.Weather[0].Main)" Size="Size.Large" />
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Typo="Typo.subtitle1" Class="fw-bold">Tomorrow</MudText>
                            <MudText>@tomorrow.Main.Temp.ToString("0") °C</MudText>
                            <MudText>@tomorrow.Weather[0].Description</MudText>
                        </MudItem>
                    </MudGrid>
                </MudCard>
            }
        }
    </MudPaper>
}

        </MudItem>

    <MudItem xs="12" md="7">
    @if (WeatherData != null)
    {
        <MudPaper Class="mb-4 pa-8 gradient-card-orange" Style="width: 690px;border-radius: 16px; margin-top: -79px; margin-left: -100px;">
            <MudText Typo="Typo.h6" Class="mb-1" Style="text-align:center;">Today's Highlights</MudText>

            <MudGrid GutterSize="3">
                <!-- Wind Status -->
                <MudItem xs="12" md="4">
                    <MudPaper Class="pa-5 wind gradient-card-red" Style="border-radius: 12px; text-align:start;">
                        <MudText Typo="Typo.h6">Wind Speed</MudText>
                        <img src="images/images.png" alt="Wind Chart" 
                            style="width:100%; height:auto; border-radius:8px; margin-top:4px;"/> 
                        
                        <div Style="display:flex; justify-content:space-between; margin-top:15px;">
                        <MudText Typo="Typo.subtitle1">@WeatherData.Wind.Speed km/h</MudText>
                        <MudText Typo="Typo.subtitle1">@DateTime.Now.ToShortTimeString()</MudText>
                        </div>
                    </MudPaper>
                </MudItem>

                <!-- Sunrise & Sunset -->
                <MudItem xs="12" md="4">
                    <MudPaper Class="pa-4 gradient-card-green" Style="border-radius: 12px;  text-align:start;">
                        <MudText Typo="Typo.h6">Sunrise & Sunset</MudText>

                        <svg viewBox="0 0 200 120" width="100%" height="128px">
            <!-- Semi-circle Arc -->
            <path d="M 20 100 A 80 80 0 0 1 180 100"
                  stroke="orange" stroke-dasharray="4"
                  stroke-width="2" fill="transparent" />

            <!-- Sun icon moving along arc -->
            <circle cx="@SunX" cy="@SunY" r="8" fill="gold" stroke="orange" stroke-width="2" />
        </svg>
                      
                      <div style="display:flex; justify-content:space-between; margin-top:-20px;">
                            <div>
                                 <br />
                                <MudText Typo="Typo.body2" Color="Color.Primary">
                                    @DateTimeOffset.FromUnixTimeSeconds(WeatherData.Sys.Sunrise).ToLocalTime().ToString("hh:mm tt")
                                </MudText>
                            </div>
                            <div>
                                <br />
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    @DateTimeOffset.FromUnixTimeSeconds(WeatherData.Sys.Sunset).ToLocalTime().ToString("hh:mm tt")
                                </MudText>
                            </div>    
                            
                      </div>
                    
                    </MudPaper>
                </MudItem>

                <!-- Humidity -->
                <MudItem xs="12" md="4">
                    <MudPaper Class="pa-4 gradient-card-black" Style="border-radius: 12px;  text-align:center;">
                        <MudText Typo="Typo.h6">Humidity</MudText>
                        <img src="images/humidity.png" alt="Humidity Icon" 
                            style="width:100%; height:114px; border-radius:8px; "/>
                            <MudText Typo="Typo.h5">@WeatherData.Main.Humidity %</MudText>
                    </MudPaper>
                </MudItem>

                
                        
                    <MudItem xs="12" md="4">
                        <MudPaper Class="pa-4 gradient-card-pale" Style="border-radius: 12px;  text-align:center; color: white;">
                            <MudText Typo="Typo.h6">Visibility</MudText>
                            <MudText Typo="Typo.subtitle1">@((WeatherData.Visibility/1000.0).ToString("0.0")) km</MudText>
                            </MudPaper>
                    </MudItem>

                <!-- Feels Like -->
                    <MudItem xs="12" md="4">
                        <MudPaper Class="pa-4 gradient-card-neo" Style="border-radius: 12px;  text-align:center; color: white; ">
                            <MudText Typo="Typo.h6">Temp</MudText>
                            <MudText Typo="Typo.subtitle1">@WeatherData.Main.Temp &deg;C</MudText>
                            </MudPaper>
                    </MudItem>

                    <MudItem xs="12" md="4">
                        <MudPaper Class="pa-4 gradient-card-sand" Style="border-radius: 12px; text-align:center; color: white;">
                            <MudText Typo="Typo.h6">UV Index</MudText>
                            <MudText Typo="Typo.subtitle1">@WeatherData.UVIndex</MudText>
                            </MudPaper>
                    </MudItem>
            
            </MudGrid>
        </MudPaper>
    }

    <MudText Typo="Typo.h6" Class="mt-3 mb-2" Style="margin-left: -90px;">Map</MudText>
        <MudItem xs="12">
            <div id="map" style="height: 330px; width: 690px; border-radius: 12px; margin-left: -100px;"></div>
        </MudItem> 
</MudItem>

        

    </MudGrid>
</MudContainer> 










@code {
    private string city = "";
    private WeatherData? WeatherData;

    private List<WeatherData> favoriteWeathers = new();
    private ForecastResponse? forecastData;
    private bool isLoading = false;
    private string? errorMessage;
    private string? alertMessage;
    private Severity alertSeverity;

    private bool showAlert;
    private System.Timers.Timer alertTimer;

    private UserModel? currentUser;
    private bool isSearchBlocked = false;
    private bool _hasRendered = false;
    private int guestSearchCount = 0;
    private readonly string defaultCity = "Chennai";
    private bool IsCurrentCityFavorite = false;
    private bool _isFavorite = false;


    private string currentWeatherIcon = Icons.Material.Filled.HelpOutline;

    private string selectedLayer = "temp_new";
    
    private double SunX { get; set; }
    private double SunY { get; set; }
    private System.Timers.Timer _timer;


    private string GetTime(long unix)
    {
        return DateTimeOffset.FromUnixTimeSeconds(unix).ToLocalTime().ToString("hh:mm tt");
    }

    private void ShowAlert(string message, Severity severity)
    {
        alertMessage = message;
        alertSeverity = severity;
        showAlert = true;

        alertTimer?.Dispose(); // Dispose any existing timer

        alertTimer = new System.Timers.Timer(4000);
        alertTimer.Elapsed += (_, _) =>
        {
            showAlert = false;
            InvokeAsync(StateHasChanged);
            alertTimer.Dispose();
        };
        alertTimer.Start();

        StateHasChanged();
    }


    private async Task SearchWeather()
    {
        isLoading = true;
        errorMessage = null;
        WeatherData = null;
        forecastData = null;

        try
        {
            WeatherData = await WSService.GetWeatherAsync(city);
            forecastData = await WSService.GetForecastAsync(city);

            if (WeatherData == null)
            {
                errorMessage = $"Weather not found for '{city}'";
            }
            else
            {
                var json = await SessionStorage.GetItemAsync<string>("currentUser");
                if (!string.IsNullOrWhiteSpace(json))
                {
                    currentUser = JsonSerializer.Deserialize<UserModel>(json);
                    if (currentUser != null)
                    {
                        await SearchService.AddSearchAsync(new SearchHistory
                        {
                            Email = currentUser.Email,
                            City = city,
                            SearchedAt = DateTime.UtcNow,
                            WeatherSummary = WeatherData.Weather[0].Main
                        });

                        IsCurrentCityFavorite = currentUser.FavoriteCities?.Contains(city, StringComparer.OrdinalIgnoreCase) == true;
                    }
                }

                // Set the appropriate icon for the current weather condition
                var condition = WeatherData.Weather?[0]?.Main;
                if (!string.IsNullOrWhiteSpace(condition))
                {
                    currentWeatherIcon = GetWeatherIcon(condition);
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching weather: {ex.Message}";
        }

        isLoading = false;
    }

    
  private string GetWeatherIcon(string? condition)
    {
        return condition?.ToLower() switch
        {
            "clear" => Icons.Material.Filled.WbSunny,
            "clouds" => Icons.Material.Filled.Cloud,
            "rain" => Icons.Material.Filled.Grain,
            "snow" => Icons.Material.Filled.AcUnit,
            "thunderstorm" => Icons.Material.Filled.FlashOn,
            "drizzle" => Icons.Material.Filled.Grain,
            _ => Icons.Material.Filled.HelpOutline
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender && !_hasRendered)
    {
        try
        {
            var json = await SessionStorage.GetItemAsync<string>("currentUser");

            if (!string.IsNullOrWhiteSpace(json))
            {
                currentUser = JsonSerializer.Deserialize<UserModel>(json);
            }
            else
            {
                int anonCount = await SessionStorage.GetItemAsync<int>("anonSearchCount");
                if (anonCount >= 3)
                {
                    isSearchBlocked = true;
                }
            }

            city = defaultCity;
            await SearchWeather();

            _hasRendered = true;
            StateHasChanged();
        }
        catch (JsonException)
        {
            await SessionStorage.RemoveItemAsync("currentUser");
            currentUser = null;
        }
    }

    // Run weather map update if we have weather data
    if (WeatherData != null)
    {
        // Choose correct weather overlay
        var condition = WeatherData.Weather[0].Main.ToLower();

        if (condition.Contains("cloud"))
            selectedLayer = "clouds_new";
        else if (condition.Contains("rain") || condition.Contains("drizzle"))
            selectedLayer = "precipitation_new";
        else if (condition.Contains("snow"))
            selectedLayer = "snow";
        else if (condition.Contains("wind"))
            selectedLayer = "wind_new";
        else
            selectedLayer = "temp_new"; // default

        // Auto-zoom logic based on name length
        int zoomLevel = WeatherData.Name.Length > 10 ? 10 : 8;

        await JS.InvokeVoidAsync("initWeatherMap", WeatherData.Coord.Lat, WeatherData.Coord.Lon, selectedLayer, zoomLevel);
    }
}

    private async Task HandleSearchAsync()
{
    UserModel currentUser = null;

    try
    {
        var json = await SessionStorage.GetItemAsync<string>("currentUser");
        if (!string.IsNullOrWhiteSpace(json))
            currentUser = JsonSerializer.Deserialize<UserModel>(json);
    }
    catch
    {
        await SessionStorage.RemoveItemAsync("currentUser");
    }

    if (currentUser == null) // Anonymous user
    {
        int searchCount = await SessionStorage.GetItemAsync<int>("anonSearchCount");

        // ✅ Check limit BEFORE fetching data
        if (searchCount >= 3)
        {
            ShowAlert("You have reached the search limit. Please log in or sign up to continue.", Severity.Warning);
            isSearchBlocked = true;
            StateHasChanged();
            return; // Stop here
        }

        // If under limit, fetch weather
        try
        {
            WeatherData = await WSService.GetWeatherAsync(city);
            forecastData = await WSService.GetForecastAsync(city);

            await CheckIfCityIsFavorite();
        }
        catch (Exception ex)
        {
            ShowAlert($"Error fetching weather: {ex.Message}", Severity.Error);
        }

        // ✅ Increment count AFTER successful search
        searchCount++;
        await SessionStorage.SetItemAsync("anonSearchCount", searchCount);
    }
    else
    {
        await SearchWeather();
    }
}



    private async Task CheckIfCityIsFavorite()
    {
        if (currentUser != null && !string.IsNullOrWhiteSpace(city))
        {
            var user = await UserService.GetUserByEmailAsync(currentUser.Email);
            IsCurrentCityFavorite = user?.FavoriteCities?.Any(c => 
                c.Equals(city, StringComparison.OrdinalIgnoreCase)) ?? false;
        }
    }

    private async Task ToggleFavoriteCity()
    {
        if (currentUser == null)
        {
            ShowAlert("You must be logged in to favorite a city.", Severity.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(city))
        {
            ShowAlert("City name is not available.", Severity.Error);
            return;
        }

        IsCurrentCityFavorite = !IsCurrentCityFavorite;

        try
        {
            if (IsCurrentCityFavorite)
            {
                await UserService.AddFavoriteAsync(currentUser.Email, city);
                ShowAlert($"{city} added to favorites", Severity.Success);
    
            }
            currentUser = await UserService.GetUserByEmailAsync(currentUser.Email);
            var updatedJson = JsonSerializer.Serialize(currentUser);
            await SessionStorage.SetItemAsync("currentUser", updatedJson);
        }
        catch (Exception ex)
        {
            ShowAlert($"Error: {ex.Message}", Severity.Error);
        }
    }

    protected override void OnInitialized()
    {
        // Update every minute
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += (s, e) =>
        {
            InvokeAsync(() =>
            {
                CalculateSunPosition();
                StateHasChanged();
            });
        };
        _timer.Start();
    }

    protected override void OnParametersSet()
    {
        if (WeatherData?.Sys != null)
        {
            CalculateSunPosition();
        }
    }

    // ✅ Just a normal private method (no override!)
    private void CalculateSunPosition()
    {
        var sunrise = DateTimeOffset.FromUnixTimeSeconds(WeatherData.Sys.Sunrise).ToLocalTime();
        var sunset = DateTimeOffset.FromUnixTimeSeconds(WeatherData.Sys.Sunset).ToLocalTime();
        var now = DateTime.Now;

        double progress = Math.Clamp(
            (now - sunrise).TotalMinutes / (sunset - sunrise).TotalMinutes,
            0, 1);

        double angle = 180 * progress;
        double radius = 80;
        double centerX = 100;
        double centerY = 100;

        SunX = centerX - radius * Math.Cos(Math.PI * angle / 180);
        SunY = centerY - radius * Math.Sin(Math.PI * angle / 180);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

}