@page "/"
@using WRModel.Models
@using WSService.Services
@using MudBlazor
@using System.Text.Json
@rendermode InteractiveServer
@inject WeatherService WSService
@inject SearchHistoryService SearchService
@inject MongoUserService UserService
@inject IDialogService DialogService
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject NavigationManager Navigation



<MudDrawer Open="true" Anchor="Anchor.Left" Variant="DrawerVariant.Persistent" Class="mud-elevation-2 my-sidebar" Style="width: 90px; height: 490px; margin-top: 1px;">
    <MudNavMenu>

        <!-- Top section: App name -->
        <MudText Typo="Typo.h6" Class="text-center my-app-name">weatherapp</MudText>
        <MudDivider />

        <!-- Navigation items -->
        <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Rounded.Home" Style="margin-top: 10px;" />
        <MudNavLink Href="/favoritecity" Icon="@Icons.Material.Rounded.Star" Style="margin-top: 10px;" />
        <MudNavLink Href="/settings" Icon="@Icons.Material.Rounded.Settings" />
        <MudNavLink Href="/login" Icon="@Icons.Material.Rounded.Login" />
    

        <MudSpacer /> <!-- Push profile to bottom -->

        <!-- Bottom section: Profile icon -->
        <MudNavLink Href="/profile" Class="profile-circle" Style="margin-top: 9rem;">
            <MudAvatar Icon="@Icons.Material.Filled.Person" Size="Size.Large" Style="margin-right: 5rem;"/>
        </MudNavLink>

    </MudNavMenu>
</MudDrawer>

<MudContainer MaxWidth="MaxWidth.False" Class="pa-6" Style="margin-left: 100px;">
    <MudGrid GutterSize="3">

        <!-- LEFT COLUMN: Search + Weather -->
        <MudItem xs="12" md="5">
            <MudPaper Class="pa-4" Style="border-radius: 16px;">
                <MudTextField @bind-Value="city" Label="Search City" Variant="Variant.Filled" Class="mt-2" />
                <MudButton OnClick="HandleSearchAsync" Color="Color.Primary" Variant="Variant.Filled" Class="mt-2">SEARCH</MudButton>

                @if (weatherData != null)
                {
                    <MudDivider Class="my-4" />
                    <MudGrid>
                        <MudItem xs="4">
                            <MudIcon Icon="@GetWeatherIcon(weatherData.weather[0].Main)" Size="Size.Large" />
                        </MudItem>
                        <MudItem xs="8">
                            <MudText Typo="Typo.h3" Class="font-weight-bold">@weatherData?.Main.Temp &deg;C</MudText>
                            <MudText Typo="Typo.subtitle1">@weatherData?.weather[0].Description</MudText>
                            <MudText Typo="Typo.subtitle2">@weatherData?.Name, @weatherData?.Sys.Country</MudText>
                            <MudText Typo="Typo.caption">@DateTime.Now</MudText>
                        </MudItem>
                     </MudGrid>
                }    
            </MudPaper>

            <MudSlideTransition>
                        @if (showAlert)
                        {
                            <MudAlert Severity="@alertSeverity" Dense="true" Elevation="2" Variant="Variant.Outlined"  Class="mt-2" Closeable="true" OnClose="@(() => showAlert = false)">
                                @alertMessage
                            </MudAlert>
                        }
            </MudSlideTransition>  

            <!-- 5-day Forecast -->
            @if (forecastData != null)
            {
                <MudPaper Class="pa-4 mt-4 forecast-scroll" Style="border-radius: 16px; max-height: 150px; overflow-y: auto;">
                    <MudText Typo="Typo.h6" Class="mb-2">5-day Forecast</MudText>
                        <MudDivider Class="mb-2" />

                            @foreach (var item in forecastData.list.Where((x, i) => i % 8 == 0).Take(5))
                        {
                            <MudPaper Class="pa-4 my-2 d-flex justify-between align-center" Style="border-radius: 16px;">
                                <div>
                                    <MudText Typo="Typo.subtitle2">
                                        @DateTimeOffset.FromUnixTimeSeconds(item.Dt).ToLocalTime():dd/MM/yyyy hh tt
                                    </MudText>
                                    <MudText>Temp: @item.Main.Temp &deg;C</MudText>
                                    <MudText>@item.Weather[0].Description</MudText>
                                </div>
                                    <MudIcon Icon="@GetWeatherIcon(item.Weather[0].Main)" Size="Size.Large" />
                            </MudPaper>
                        }
                </MudPaper>

            }
        </MudItem>

         <MudItem xs="12" md="7">
            @if (weatherData != null)
            {
                <MudPaper Class="pa-4" Style="border-radius: 16px;">
                    <MudText Typo="Typo.h6" Class="mb-2">Today's Highlights</MudText>
                    <MudGrid GutterSize="3">
                        <MudItem xs="6" md="4">
                            <MudPaper Class="pa-2" Style="border-radius: 12px;">
                                <MudText Typo="Typo.subtitle2">Temperature</MudText>
                                <MudText Typo="Typo.h6">@weatherData?.Main.Temp &deg;C</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="6" md="4">
                            <MudPaper Class="pa-2" Style="border-radius: 12px;">
                                <MudText Typo="Typo.subtitle2">Humidity</MudText>
                                <MudText Typo="Typo.h6">@weatherData?.Main.Humidity %</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="6" md="4">
                            <MudPaper Class="pa-2" Style="border-radius: 12px;">
                                <MudText Typo="Typo.subtitle2">Pressure</MudText>
                                <MudText Typo="Typo.h6">@weatherData?.Main.Pressure hPa</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="6" md="4">
                            <MudPaper Class="pa-2" Style="border-radius: 12px;">
                                <MudText Typo="Typo.subtitle2">Description</MudText>
                                <MudText Typo="Typo.h6">@weatherData?.weather[0].Description</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="6" md="4">
                            <MudPaper Class="pa-2" Style="border-radius: 12px;">
                                <MudText Typo="Typo.subtitle2">Speed</MudText>
                                <MudText Typo="Typo.h6">@weatherData?.Wind.Speed m/s</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="6" md="4">
                            <MudPaper Class="pa-2" Style="border-radius: 12px;">
                                <MudText Typo="Typo.subtitle2">Sunrise & Sunset</MudText>
                                <MudText Typo="Typo.body2">🌅 @DateTimeOffset.FromUnixTimeSeconds(weatherData.Sys.Sunrise).ToLocalTime():HH:mm</MudText>
                                <MudText Typo="Typo.body2">🌇 @DateTimeOffset.FromUnixTimeSeconds(weatherData.Sys.Sunset).ToLocalTime():HH:mm</MudText>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private string city = "";
    private WeatherData? weatherData;
    private ForecastResponse? forecastData;
    private bool isLoading = false;
    private string? errorMessage;
    private string? alertMessage;
    private Severity alertSeverity;

    private bool showAlert;
    private System.Timers.Timer alertTimer;

    private UserModel? currentUser;
    private bool isSearchBlocked = false;
    private bool _hasRendered = false;
    private int guestSearchCount = 0;
    private readonly string defaultCity = "Chennai";
    private bool IsCurrentCityFavorite = false;

    private string currentWeatherIcon = Icons.Material.Filled.HelpOutline;

    private string GetTime(long unix)
    {
        return DateTimeOffset.FromUnixTimeSeconds(unix).ToLocalTime().ToString("hh:mm tt");
    }

    private void ShowAlert(string message, Severity severity)
    {
        alertMessage = message;
        alertSeverity = severity;
        showAlert = true;

        alertTimer?.Dispose(); // Dispose any existing timer

        alertTimer = new System.Timers.Timer(4000);
        alertTimer.Elapsed += (_, _) =>
        {
            showAlert = false;
            InvokeAsync(StateHasChanged);
            alertTimer.Dispose();
        };
        alertTimer.Start();

        StateHasChanged();
    }


    private async Task SearchWeather()
    {
        isLoading = true;
        errorMessage = null;
        weatherData = null;
        forecastData = null;

        try
        {
            weatherData = await WSService.GetWeatherAsync(city);
            forecastData = await WSService.GetForecastAsync(city);

            if (weatherData == null)
            {
                errorMessage = $"Weather not found for '{city}'";
            }
            else
            {
                var json = await SessionStorage.GetItemAsync<string>("currentUser");
                if (!string.IsNullOrWhiteSpace(json))
                {
                    currentUser = JsonSerializer.Deserialize<UserModel>(json);
                    if (currentUser != null)
                    {
                        await SearchService.AddSearchAsync(new SearchHistory
                        {
                            Email = currentUser.Email,
                            City = city,
                            SearchedAt = DateTime.UtcNow,
                            WeatherSummary = weatherData.weather[0].Main
                        });

                        IsCurrentCityFavorite = currentUser.FavoriteCities?.Contains(city, StringComparer.OrdinalIgnoreCase) == true;
                    }
                }

                // Set the appropriate icon for the current weather condition
                var condition = weatherData.weather?[0]?.Main;
                if (!string.IsNullOrWhiteSpace(condition))
                {
                    currentWeatherIcon = GetWeatherIcon(condition);
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching weather: {ex.Message}";
        }

        isLoading = false;
    }
  private string GetWeatherIcon(string? condition)
    {
        return condition?.ToLower() switch
        {
            "clear" => Icons.Material.Filled.WbSunny,
            "clouds" => Icons.Material.Filled.Cloud,
            "rain" => Icons.Material.Filled.Grain,
            "snow" => Icons.Material.Filled.AcUnit,
            "thunderstorm" => Icons.Material.Filled.FlashOn,
            "drizzle" => Icons.Material.Filled.Grain,
            _ => Icons.Material.Filled.HelpOutline
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasRendered)
        {
            try
            {
                var json = await SessionStorage.GetItemAsync<string>("currentUser");

                if (!string.IsNullOrWhiteSpace(json))
                {
                    currentUser = JsonSerializer.Deserialize<UserModel>(json);
                }
                else
                {
                    int anonCount = await SessionStorage.GetItemAsync<int>("anonSearchCount");
                    if (anonCount >= 3)
                    {
                        isSearchBlocked = true;
                    }
                }

                city = defaultCity;
                await SearchWeather();

                _hasRendered = true;
                StateHasChanged();
            }
            catch (JsonException)
            {
                await SessionStorage.RemoveItemAsync("currentUser");
                currentUser = null;
            }
        }
    }

    private async Task HandleSearchAsync()
    {
        UserModel currentUser = null;

        try
        {
            var json = await SessionStorage.GetItemAsync<string>("currentUser");
            if (!string.IsNullOrWhiteSpace(json))
                currentUser = JsonSerializer.Deserialize<UserModel>(json);
            
        }
        catch 
        {
            await SessionStorage.RemoveItemAsync("currentUser");
        }

        if (currentUser == null)
        {
            int searchCount = 0;
            try
            {
                searchCount = await SessionStorage.GetItemAsync<int>("anonSearchCount");
            }
            catch
            {
                searchCount = 0;
            }
            searchCount++;
            await SessionStorage.SetItemAsync("anonSearchCount", searchCount);


            if (searchCount >= 3)
            {
                isSearchBlocked = true;
                StateHasChanged();

                 _ = Task.Run(async () =>
                {
                    await Task.Delay(5000);
                    isSearchBlocked = false;
                    InvokeAsync(StateHasChanged);
                });

                return;
            }
        }

        await SearchWeather();
    }

    private async Task ToggleFavoriteCity()
    {
        if (currentUser == null)
        {
            ShowAlert("You must be logged in to favorite a city.", Severity.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(city))
        {
            ShowAlert("City name is not available.", Severity.Error);
            return;
        }

        IsCurrentCityFavorite = !IsCurrentCityFavorite;

        try
        {
            if (IsCurrentCityFavorite)
            {
                await UserService.AddFavoriteAsync(currentUser.Email, city);
                ShowAlert($"{city} added to favorites", Severity.Success);
    
            }
            currentUser = await UserService.GetUserByEmailAsync(currentUser.Email);
            var updatedJson = JsonSerializer.Serialize(currentUser);
            await SessionStorage.SetItemAsync("currentUser", updatedJson);
        }
        catch (Exception ex)
        {
            ShowAlert($"Error: {ex.Message}", Severity.Error);
        }
    }
}