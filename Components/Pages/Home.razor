@page "/"
@using WRModel.Models
@using WSService.Services
@using MudBlazor
@using System.Text.Json
@rendermode InteractiveServer
@inject WeatherService WSService
@inject SearchHistoryService SearchService
@inject MongoUserService UserService
@inject ISnackbar Snackbar
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject NavigationManager Navigation


<PageTitle>Home</PageTitle>

<MudAppBar Color="Color.Info" Class="mud-appbar mt-2 pa-3">
    
        <MudText Style="font-size: 35px;"> WeatherApp</MudText>
        <MudSpacer />
        <MudButton OnClick="@(() => Navigation.NavigateTo("/signin"))" Variant="Variant.Text"  Style="font-size: 20px;">Signin</MudButton>
        <MudButton OnClick="@(() => Navigation.NavigateTo("/login"))" Variant="Variant.Text"  Style="font-size: 20px;">Login</MudButton>
</MudAppBar>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudContainer  Class="pa-20 app">
        <MudText  Style="font-size: 3rem; font-weight: bold; color: red;" Align="Align.Center">
            WeatherApp
        </MudText><br/>
        <MudText Style="font-size: 30px;" Align="Align.Center">
            <span style="color: black">Weather forecasts, nowcasts and</span> 
            <span style="color: orange"> history in a fast and elegant way</span>
        </MudText>
        
        <MudTextField @bind-Value="city" Style="font-size: 2rem;" Label="Enter City" Variant="Variant.Outlined" Class="mb-3 mt-12 glass-box"  />
        <MudButton Variant="Variant.Filled"  OnClick="SearchWeather" Class="button" Style="font-weight: bold; font-size: 20px;color: red;">
            Get Weather
        </MudButton>
    </MudContainer>
</MudContainer>

        <div class="weather-video-section">
            @if (!string.IsNullOrEmpty(CurrentVideoPath) && WeatherData?.Weather?.Count > 0)
          {
            <video autoplay loop muted playsinline class="weather-video">
                <source src="@CurrentVideoPath" type="video/mp4" />
            </video>
          }
        </div>


        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" Class="mt-4" />
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mt-4">@errorMessage</MudAlert>
        }
        else if (WeatherData != null)
        {
            <MudContainer Class="contain mt-10" >
                <MudGrid GutterSize="3">

                            <MudItem xs="12" sm="2" md="2">
                                <MudCard>
                                    <MudCardContent Class="weather-card">
                                        <MudText Typo="Typo.h6">Temperature</MudText>
                                        <MudText Typo="Typo.h4" Color="Color.Primary">@WeatherData.Main.Temp &deg;C</MudText>
                                        <MudIcon Icon="@Icons.Material.Filled.Thermostat" Size="Size.Medium" />    
                                    </MudCardContent>    
                                </MudCard>
                            </MudItem>

                    <MudItem xs="12" sm="2" md="2">
                        <MudCard>
                            <MudCardContent Class="humidit">
                                <MudText Typo="Typo.h6">Humidity</MudText>
                                <MudText Typo="Typo.h4" Color="Color.Primary">@WeatherData.Main.Humidity %</MudText>
                                <MudIcon Icon="@Icons.Material.Filled.WaterDrop" Size="Size.Medium" />    
                            </MudCardContent>
                        </MudCard>
                    </MudItem>

                    <MudItem xs="12" sm="3" md="2">
                        <MudCard>
                            <MudCardContent Class="wind">
                                <MudText Typo="Typo.h6">WindSpeed</MudText>
                                <MudText Typo="Typo.h4" Color="Color.Primary">@WeatherData.Wind.Speed m/s</MudText>
                                <MudIcon Icon="@Icons.Material.Filled.Air" Size="Size.Medium" />    
                            </MudCardContent>
                        </MudCard>
                    </MudItem>

                    <MudItem xs="12" sm="3" md="2">
                        <MudCard>
                            <MudCardContent Class="press">
                                <MudText Typo="Typo.h6">Pressure</MudText>
                                <MudText Typo="Typo.h4" Color="Color.Primary">@WeatherData.Main.Pressure hPa</MudText>
                                <MudIcon Icon="@Icons.Material.Filled.Speed" Size="Size.Medium" />    
                            </MudCardContent>
                        </MudCard>
                    </MudItem>

                    <MudItem xs="12" sm="3" md="2">
                        <MudCard>
                            <MudCardContent Class="rise">
                                <MudText Typo="Typo.h6">Sunrise</MudText>
                                <MudText Typo="Typo.h4" Color="Color.Primary">@GetTime(WeatherData.Sys.Sunrise)</MudText>
                                <MudIcon Icon="@Icons.Material.Filled.WbSunny" Size="Size.Medium" />    
                            </MudCardContent>
                        </MudCard>
                    </MudItem>

                    <MudItem xs="12" sm="3" md="2">
                        <MudCard Elevation="6">
                            <MudCardContent Class="set">
                                <MudText Typo="Typo.h6">Sunset</MudText>
                                <MudText Typo="Typo.h4" Color="Color.Primary">@GetTime(WeatherData.Sys.Sunset)</MudText>
                                <MudIcon Icon="@Icons.Material.Filled.NightlightRound" Size="Size.Medium" />    
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudContainer>
        }    
    

        @if (forecastData != null)
        {
        <MudContainer Class="mt-8 forecas">
            <MudContainer Class="mt-4 pa-4 forecast" Elevation="4">
                <MudText Typo="Typo.h6" Align="Align.Center">5-Day Forecast</MudText>
                <MudDivider Class="mb-2" />
                <MudGrid>
                    @foreach (var item in forecastData.list.Where((x, i) => i % 8 == 0).Take(5))
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <MudPaper Class="pa-3 mb-2 forecast-card" Elevation="2">
                                <MudText Typo="Typo.subtitle2">
                                    @DateTimeOffset.FromUnixTimeSeconds(item.Dt).ToLocalTime().ToString("dddd, hh tt")
                                </MudText>
                                <MudText>Temp: @item.Main.Temp °C</MudText>
                                <MudText>@item.Weather[0].Main - @item.Weather[0].Description</MudText>
                                <MudText>Wind: @item.Wind.Speed m/s</MudText>
                            </MudPaper>
                        </MudItem>
                    }
                </MudGrid>
            </MudContainer>
        </MudContainer>
        }
    
        

        @if (searchHistory != null && searchHistory.Count > 0) 
        {   
            <MudContainer MaxWidth="MaxWidth.Small" Class="mt-8">
                <MudContainer Class="mt-4 pa-4 Search" Elevation="2">
                    <MudText Typo="Typo.h6">Recent Searches</MudText>
                    <MudDivider Class="mb-2" />
                    @foreach (var history in searchHistory)
                    {
                        <MudText>- @history.City (@history.WeatherSummary) on @history.SearchedAt.ToLocalTime().ToString("g")</MudText>
                    }
                </MudContainer>           
            </MudContainer>    
        }
                
        
        
   

@code {
    private string city = "";
    private WeatherResponse? WeatherData;
    private ForecastResponse? forecastData;
    private bool isLoading = false;
    private string? errorMessage;
    private List<SearchHistory>? searchHistory;
    private string CurrentVideoPath = "";
    private string CurrentCondition = "";
    
        
    
    private string GetTime(long unix)
    {
        return DateTimeOffset.FromUnixTimeSeconds(unix).ToLocalTime().ToString("hh:mm tt");
    }

    private async Task SearchWeather()
    {
        isLoading = true;
        errorMessage = null;
        WeatherData = null;
        forecastData = null;

        try
        {
            WeatherData = await WSService.GetWeatherAsync(city);
            forecastData = await WSService.GetForecastAsync(city);

            if (WeatherData == null)
            {
                errorMessage = $"Weather not found for '{city}'";
            }
            else
            {
                var json = await SessionStorage.GetItemAsync<string>("currentUser");
                if (!string.IsNullOrWhiteSpace(json))
                {
                    var currentUser = JsonSerializer.Deserialize<UserModel>(json);
                    if (currentUser != null)
                    {
                        await SearchService.AddSearchAsync(new SearchHistory
                        {
                            Email = currentUser.Email,
                            City = city,
                            SearchedAt = DateTime.UtcNow,
                            WeatherSummary = WeatherData.Weather[0].Main
                        });

                        searchHistory = await SearchService.GetUserHistoryAsync(currentUser.Email);
                    }
                }

                await LoadWeatherAsync(city);
            }

        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching weather: {ex.Message}";
        }

        isLoading = false;
    }

    private async Task LoadWeatherAsync(string city)
    {
        if (WeatherData == null)
        {
        WeatherData = await WSService.GetWeatherAsync(city);
        }

        if (WeatherData?.Weather?.Count > 0)
        {
            string condition = WeatherData.Weather[0].Main;
            CurrentVideoPath = GetVideoForCondition(condition);
            Console.WriteLine($"Video path for '{condition}': {CurrentVideoPath}");
        }
    else
        {
            CurrentVideoPath = string.Empty;
        }
    }

    
    private string GetVideoForCondition(string condition) => condition switch
    {
        "Rain" => "/videos/Rainy.mp4",
        "Snow" => "/videos/Snow.mp4",
        "ThunderStorm" => "/videos/ThunderStorm.mp4",
        "Clear" => "/videos/Clear.mp4",
        "Clouds"   => "/videos/Clouds.mp4",
        _=> string.Empty
    };

    
    
}